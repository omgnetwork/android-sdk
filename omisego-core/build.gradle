apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'checkstyle'
apply plugin: 'com.novoda.bintray-release'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'com.adarshr.test-logger'
apply from: 'dokka.gradle'
apply from: '../config.gradle'

def constants = project.ext

android {
    buildToolsVersion constants.buildToolsVersion
    compileSdkVersion constants.compileSdkVersion
    defaultConfig {
        minSdkVersion constants.minSdkVersion
        targetSdkVersion constants.targetSdkVersion
        versionCode constants.versionCode
        versionName constants.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-proguard-rules.pro'
    }
    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
        test.java.srcDirs += 'src/liveTest/kotlin'
        test.resources.srcDirs += 'src/liveTest/resources'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                if (it.name == "testReleaseUnitTest") return
                if (project.hasProperty('live') && project.live.toBoolean() == true) {
                    println "Running live tests..."
                    it.include 'co/omisego/omisego/live/**'
                } else {
                    println "Running unit tests..."
                    it.exclude 'co/omisego/omisego/live/**'
                }
            }
        }
    }

    lintOptions {
        disable 'ParcelCreator'
    }
}

androidExtensions {
    experimental = true
}

publish {
    userOrg = constants.userOrg
    groupId = constants.groupId
    artifactId = constants.artifactIdCore
    publishVersion = constants.versionName
    desc = constants.desc
    website = constants.website
}

checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

testlogger {
    showSummary true
    theme 'mocha'
}

task checkstyle(type: Checkstyle) {
    source 'src/main/java'
    include '**/*.kt'
    exclude '**/gen/**'

    // empty classpath
    classpath = files()
}

tasks.withType(Javadoc) {
    enabled = false
}

dependencies {
    // Core dependencies
    api deps.kotlin

    // Used for the QRCode generator and the QRCode scanner.
    implementation deps.scanner

    // Networking
    api deps.networking

    // Unit test
    testImplementation deps.test
    testImplementation("com.nhaarman:mockito-kotlin:1.5.0", {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    })

    // Instrumental test
    androidTestImplementation deps.androidTest
}

repositories {
    mavenCentral()
}
